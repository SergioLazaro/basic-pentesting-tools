import httplib

class http_analysis:
    def __init__(self, host, port_list, working_dir):
        global request_data
        self.host = host
        self.port_list = port_list
        self.working_dir = working_dir
        self.start_analysis()

    def start_analysis(self):
        for port in self.port_list:
            if port[1] == '80' or port[1] == '443' and port[2] == 'up':
                try:
                    #Check if request is being redirected
                    self.is_redirected()

                    #Check OPTIONS method
                    self.check_options(port[1])

                    #Check secure headers
                    self.check_secure_headers(port[1])
                except httplib.BadStatusLine:
                    print "[!!] Bad Status Line. Status code"
            else:
                print "[!!] Ports %s not found" % port[1]

    def is_redirected(self):
        conn = httplib.HTTPConnection(self.host, timeout=10)
        conn.request('HEAD', '/')
        res = conn.getresponse()
        if res.getheader('location') is not None:
            #If there is redirection, follow it
            if res.getheader('location')[:5] == 'http:':
                self.host = res.getheader('location')[7:-1]

            elif res.getheader('location')[:5] == 'https':
                self.host = res.getheader('location')[8:-1]

            print "[*] Redirection to %s" % self.host
            self.is_redirected()


    def check_options(self, port):
        print "================================"
        print "Scanning %s:%s" % (self.host,port)
        conn = httplib.HTTPConnection(self.host, port, timeout=10)
        conn.request('OPTIONS','/')
        res = conn.getresponse()
        if res.status == 200 or res.status == 301 or res.status == 302:
            print "[*] Method OPTIONS allowed"
            print "[*] Methods: %s" % res.getheader('Allow')
            self.filter_headers(res, port, 'OPTIONS')   #Create evidence
        else:
            print "[*] Method OPTIONS not allowed"

    def check_secure_headers(self, port):
        conn = httplib.HTTPConnection(self.host, timeout=10)
        conn.request('GET', '/')
        res = conn.getresponse()
        found = False
        if res.status == 200 or res.status == 301 or res.status == 302:
            # Check X-Frame-Options header
            if res.getheader('X-Frame-Options') is None:
                print "[*] Header X-Frame-Options not found!"
                found = True

            # Check X-XSS-Protection header
            if res.getheader('X-XSS-Protection') is None:
                print "[*] Header X-XSS-Protection not found!"
                found = True

            # Check Strict-Transport-Security header
            if port == '443' and res.getheader('Strict-Transport-Security') is None:
                print "[*] Header Strict-Transport-Security not found!"
                found = True

            if res.getheader('server') is not None:
                print "[*] Server: %s" % res.getheader('server')

            if res.getheader('X-Powered-By') is not None:
                print "[*] X-Powered-By: %s" % res.getheader('X-Powered-By')

            if res.getheader('X-Generator') is not None:
                print "[*] X-Generator: %s" % res.getheader('X-Generator')

            if found:
                self.filter_headers(res, port, 'GET')
        else:
            print "[*] Got different status: %s" % res.status


    def filter_headers(self,response, port, method):
        headers = response.getheaders()
        print "[*] Writing evidence in " + self.working_dir + method + '.txt'
        file = open(self.working_dir + method + '.txt', 'w')
        file.write(method.upper() + " METHOD FOR HOST %s\n" % self.host)
        file.write("======================================================\n")
        #Write request data
        file.write(method.upper() + " / HTTP/1.0\n")
        file.write("Host: %s:%s\n\n" % (self.host,port))

        #Write response data
        file.write("HTTP/1.0 %s %s\n" % (response.status,response.reason))
        for header,value in headers:
            file.write("%s: %s\n" % (header,value))
