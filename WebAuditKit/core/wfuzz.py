import subprocess, time, os

class wfuzz_launcher:
    def __init__(self, host, port_list, fuzzing_paths, config):
        self.host = host
        self.port_list = port_list
        self.fuzzing_paths = fuzzing_paths
        self.config = config
        self.iter_fuzz_dicts()

    def iter_fuzz_dicts(self):
        print "[*] Starting wfuzz on host: " + self.host
        for dict in os.listdir(self.config.wfuzz_dicts):     #Starting wfuzz 5 seconds after the previous execution ends
            self.start_wfuzz(dict)
            time.sleep(5)

    def start_wfuzz(self, dict):
        count = 1
        print self.fuzzing_paths
        for path in self.fuzzing_paths:
            path = self.check_path(path)
            default_prot = 'http://'
            for port in self.port_list:
                if port[1] == '443':
                    default_prot = 'https://'
                if os.path.isfile(self.config.wfuzz_dicts + dict):
                    prot_host_path = default_prot + self.host + path + 'FUZZ'

                    print "[*] WFUZZ PATH: python " + self.config.wfuzz_path + "wfuzz.py -z file," + \
                          self.config.wfuzz_dicts + dict + " " + prot_host_path
                    print "[*] WFUZZ output file written: " + self.config.outputpath + "wfuzz" + str(count) + ".txt"
                    #file = open(self.config.outputpath + "wfuzz" + str(count) + ".txt", "w")
                    p = subprocess.Popen([self.config.wfuzz_path + "wfuzz.py", "-z", "file," +
                                          self.config.wfuzz_dicts + dict, prot_host_path, ">", self.config.outputpath +
                                          "wfuzz" + str(count) + ".txt"], stdout=subprocess.PIPE)
                    print "WAITING PROCESS TO FINISH..."
                    #self.get_output(p,file)
                    self.check_subprocess(p, prot_host_path, dict)

                count += 1

    def check_subprocess(self,p, prot_host_path, dict):
        end_code = p.poll()
        time.sleep(10)
        if end_code is None:
            print "[*] Killing subprocess " + self.config.wfuzz_path + "wfuzz.py -z file," + \
                  self.config.wfuzz_dicts + dict + " " + prot_host_path
            p.kill()


    def get_output(self,p, file):
        while True:
            print "A"
            line = p.stdout.readline()
            if line == '':
                break
            file.write(line)

        file.close()

    def check_path(self, path):
        if path.startswith('//'):
            path = path[1:]
        return path