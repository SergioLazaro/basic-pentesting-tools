__author__ = 'sergio'

import ConfigParser, os

class configuration_reader:
    def __init__(self):
        self.config = ConfigParser.ConfigParser()
        self.config.read("config.ini")
        self.sslscan_path = self.ConfigSectionMap("Configuration")['sslscanpath']
        self.wfuzz_path = self.ConfigSectionMap("Configuration")['wfuzzpath']
        self.wfuzz_dicts = self.ConfigSectionMap("Configuration")['wfuzzdicts']
        self.depth = int(self.ConfigSectionMap("Configuration")['fuzzdepth'])
        self.outputpath = self.ConfigSectionMap("Configuration")['outputpath']
        self.checkEnviroment()
        self.printConfiguration()

    def checkEnviroment(self):
        print "Checking current enviroment..."
        if not os.path.isdir(self.outputpath):
            print "[!!] Error, OutputPath in config.ini must be a directory"
            print "[!!] Exiting..."
            exit(1)
        else:
            if not self.outputpath.endswith('/'):
                self.outputpath += '/'

        if not os.path.isdir(self.sslscan_path):
            print "[!!] Error, SSLScanPath in config.ini must be sslscan directory"
            print "[!!] Exiting..."
            exit(1)
        else:
            if not self.sslscan_path.endswith('/'):
                self.sslscan_path += '/'

        if not os.path.isdir(self.wfuzz_path):
            print "[!!] Error, WfuzzPath in config.ini must be wfuzz directory"
            print "[!!] Exiting..."
            exit(1)
        else:
            if not self.wfuzz_path.endswith('/'):
                self.wfuzz_path += '/'

        if not os.path.isdir(self.wfuzz_dicts):
            print "[!!] Error, WfuzzDicts in config.ini must be a directory with dictionaries"
            print "[!!] Exiting..."
            exit(1)

        if self.depth < 1:
            print "[!!] Error, FuzzDepth must be greater than 0"
            print "[!!] Exiting..."
            exit(1)

        print "Everything is currently OK..."

    def printConfiguration(self):
        print "====================="
        print "Current configuration"
        print "====================="
        print "SSLScanPath: " + self.sslscan_path
        print "WfuzzPath: " + self.wfuzz_path
        print "WfuzzDicts:" + self.wfuzz_dicts
        print "FuzzDepth: " + str(self.depth)
        print "OutputPath: " + self.outputpath
        print "====================="

    def ConfigSectionMap(self, section):
        dict1 = {}
        options = self.config.options(section)
        for option in options:
            try:
                dict1[option] = self.config.get(section, option)
                if dict1[option] == -1:
                    print("skip: %s" % option)
            except:
                print("exception on %s!" % option)
                dict1[option] = None
        return dict1

